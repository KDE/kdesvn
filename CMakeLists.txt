PROJECT(kdesvn)
CMAKE_MINIMUM_REQUIRED(VERSION 2.4)

OPTION(BUILD_TESTS "Building the tests yes or no (default off)")
OPTION(BUILD_KDE4 "Building for kde4 yes or no (default On)")

SET(TESTINGBUILD OFF CACHE BOOL "Enable/Disable special testing flags")
IF (TESTINGBUILD)
   ADD_DEFINITIONS("-DTESTING_RC=\"\\\"\${CMAKE_SOURCE_DIR}/src/kdesvnui.rc\\\"\" -DTESTING_PARTRC=\"\\\"\${CMAKE_SOURCE_DIR}/src/kdesvn_part.rc\\\"\"")
   ADD_DEFINITIONS("-DFORCE_ASKPASS=\"\\\"\${CMAKE_BINARY_DIR}/bin/kdesvnaskpass\\\"\"")
ENDIF (TESTINGBUILD)

IF(BUILD_TESTS)
  ENABLE_TESTING()
ENDIF(BUILD_TESTS)

SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmakemodules ${CMAKE_SOURCE_DIR}/src/svnqt/cmakemodules)

IF (NOT BUILD_KDE4)
INCLUDE(FindKdeLibs)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX}/kde3)

MACRO(KDE_AUTOMOC)
 KDE3_AUTOMOC(${ARGV})
ENDMACRO(KDE_AUTOMOC)

MACRO(KDE_ADD_UI_FILES)
 KDE3_ADD_UI_FILES(${ARGV})
ENDMACRO(KDE_ADD_UI_FILES)

MACRO(KDE_ADD_KCFG_FILES)
 KDE3_ADD_KCFG_FILES(${ARGV})
ENDMACRO(KDE_ADD_KCFG_FILES)

MACRO(KDE_ADD_KPART)
 KDE3_ADD_KPART(${ARGV})
ENDMACRO(KDE_ADD_KPART)

MACRO(KDE_ADD_MOC_FILES)
 KDE3_ADD_MOC_FILES(${ARGV})
ENDMACRO(KDE_ADD_MOC_FILES)

SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib/kde3)

ELSE (NOT BUILD_KDE4)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib${LIB_SUFFIX}/kde4)
# search packages used by KDE
ADD_DEFINITIONS("-DBUILD_KDE4")
SET (QT_USE_QT3SUPPORT 1)
add_definitions (-DQT3_SUPPORT -DQT3_SUPPORT_WARNINGS)
MESSAGE(STATUS "Building with Q3Supoort module. It should be removed after final kde4 port")
find_package(KDE4 REQUIRED)
include (KDE4Defaults)
include (MacroLibrary)

MACRO(KDE_AUTOMOC)
 QT4_AUTOMOC(${ARGV})
ENDMACRO(KDE_AUTOMOC)

MACRO(KDE_ADD_UI_FILES)
 KDE4_ADD_UI_FILES(${ARGV})
ENDMACRO(KDE_ADD_UI_FILES)

MACRO(KDE_ADD_KCFG_FILES)
 KDE4_ADD_KCFG_FILES(${ARGV})
ENDMACRO(KDE_ADD_KCFG_FILES)

MACRO(KDE_ADD_KPART)
 kde4_add_plugin(${ARGV})
ENDMACRO(KDE_ADD_KPART)

MACRO(KDE_ADD_MOC_FILES)
 KDE4_ADD_MOC_FILES(${ARGV})
ENDMACRO(KDE_ADD_MOC_FILES)

MACRO(KDESVN_INSTALL_ICONS)
 kde4_install_icons( ${ICON_INSTALL_DIR}  )
ENDMACRO(KDESVN_INSTALL_ICONS)

MACRO(KDESVN_GENERATE_LIBTOOL_FILE _subdir _target)
 KDE4_INSTALL_LIBTOOL_FILE(${_subdir} ${_target})
ENDMACRO(KDESVN_GENERATE_LIBTOOL_FILE)

include_directories (${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR} ${KDE4_INCLUDES}
${QT_QTDBUS_INCLUDE_DIR})

SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib/kde4)

ENDIF (NOT BUILD_KDE4)

INCLUDE(MacroEnsureVersion)
INCLUDE(FindSubversion)
INCLUDE(SetupCompiler)
INCLUDE(FindSqlite)

IF (HAVE_GCC_VISIBILITY)
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
    SET(_KDESVN_EXPORT "__attribute__ ((visibility(\"default\")))")
    SET(_KDESVN_NOEXPORT "__attribute__ ((visibility(\"hidden\")))")
ENDIF (HAVE_GCC_VISIBILITY)

INCLUDE_DIRECTORIES (
    BEFORE
    ${CMAKE_SOURCE_DIR}/src/svnqt
)

INCLUDE_DIRECTORIES (
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_SOURCE_DIR}/src/svnfrontend
    ${CMAKE_SOURCE_DIR}
    ${CMAKE_BINARY_DIR}/src
    ${CMAKE_BINARY_DIR}/src/svnfrontend
    ${CMAKE_BINARY_DIR}
#    ${KDE3_INCLUDE_DIR}
    ${KDE4_INCLUDE_DIR}
    ${QT_INCLUDE_DIR}
    ${APR_INCLUDE_DIR}
    ${APU_INCLUDE_DIR}
    ${SUBVERSION_INCLUDE_DIR}
)

ADD_DEFINITIONS(${KDE3_DEFINITIONS} ${QT_DEFINITIONS} ${APR_CPP_FLAGS})

IF(CMAKE_BUILD_TYPE MATCHES Debug)
  # FindKde3 always make a "-O2" into it. That isn't nice.
  STRING(REGEX REPLACE "-O2 " "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
ENDIF(CMAKE_BUILD_TYPE MATCHES Debug)
STRING(REGEX REPLACE "-fno-exceptions " "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
SET(_BASE_LDADD "-L${CMAKE_BINARY_DIR}/lib")

# current version
SET(VERSION 0.99.0)
SET(KDESVN_VERSION \"${VERSION}\")

CONFIGURE_FILE(kdesvn-config.h.in kdesvn-config.h @ONLY)
CONFIGURE_FILE(kdesvn.spec.in kdesvn.spec @ONLY)
CONFIGURE_FILE(Helperstuff/BuildService/kdesvn.spec.in Helperstuff/BuildService/kdesvn.spec @ONLY)
CONFIGURE_FILE(Doxyfile.in Doxyfile @ONLY)
CONFIGURE_FILE(Doxyfile.svnqt.in Doxyfile.svnqt @ONLY)

SET(DIST_EXCLUDE "Helperstuff")
CONFIGURE_FILE(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmakemodules/makedist.sh.in"
    "${CMAKE_CURRENT_BINARY_DIR}/makedist.sh"
    IMMEDIATE
    @ONLY)


CONFIGURE_FILE(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmakemodules/cmake_uninstall.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
    IMMEDIATE @ONLY)

ADD_CUSTOM_TARGET(uninstall
    "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")

ADD_CUSTOM_TARGET(dist
    "${CMAKE_BINARY_DIR}/makedist.sh"
    DEPENDS doc
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR})


ADD_SUBDIRECTORY(src)
# ADD_SUBDIRECTORY(po)
# ADD_SUBDIRECTORY(doc)

FILE(GLOB _POFILES po/*.po)
FOREACH(_p ${_POFILES})
  SET(POFILES "${_p} ${POFILES}")
ENDFOREACH(_p)

SET(MESSAGES_DIR ${CMAKE_SOURCE_DIR}/src)
CONFIGURE_FILE(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmakemodules/package_messages.sh.in"
    "${CMAKE_CURRENT_BINARY_DIR}/package_messages.sh"
    IMMEDIATE
    @ONLY)
ADD_CUSTOM_TARGET(package-messages
    "${CMAKE_CURRENT_BINARY_DIR}/package_messages.sh")

ADD_CUSTOM_TARGET(apidox
    "doxygen" "${CMAKE_BINARY_DIR}/Doxyfile"
    DEPENDS "${CMAKE_BINARY_DIR}/Doxyfile")
