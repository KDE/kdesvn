<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.5-Based Variant V1.1//EN" "dtd/kdedbx45.dtd" [
  <!ENTITY kdesvn "<application>kdesvn</application>">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY Rajko.Albrecht '<personname><firstname>Rajko</firstname><surname>Albrecht</surname></personname>'>
  <!ENTITY Rajko.Albrecht.mail '<email>ral@alwins-world.de</email>'>
  <!ENTITY % English "INCLUDE"><!-- change language only here -->
]>

<book lang="&language;">

<bookinfo>
<title>The &kdesvn; Handbook</title>

<authorgroup>
<author>
<firstname>Rajko</firstname>
<surname>Albrecht</surname>
<affiliation>
<address>&Rajko.Albrecht.mail;</address>
</affiliation>
</author>
<!-- TRANS:ROLES_OF_TRANSLATORS -->
</authorgroup>

<copyright>
<year>2005</year>
<year>2008</year>
<holder>&Rajko.Albrecht;</holder>
</copyright>
<legalnotice>&FDLNotice;</legalnotice>

<date>2016-05-22</date>
<releaseinfo>kdesvn 2.0</releaseinfo>

<abstract>
<para>
&kdesvn; - a subversion client by &kde;.
</para>
</abstract>

<keywordset>
<keyword>KDE</keyword>
<keyword>kdesvn</keyword>
<keyword>subversion</keyword>
<keyword>version control system</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title>Introduction</title>

<para>
&kdesvn; is a <ulink url="http://subversion.apache.org/">subversion client</ulink> by &kde;.
</para>
<para>You should have some knowledge about subversion itself, but hopefully most items are self explanatory.
</para>
<para>
You may send bug reports and feature wishes via <ulink url="https://bugs.kde.org/">&kde; Bugtracking System</ulink>.
</para>

<sect1 id="kdesvn-terms">
<title>Terms</title>
<para>
If you're familiar with revision control systems you may skip that - or read and correct the author ;)
</para>
<para>
<variablelist>
<varlistentry>
<term>Repository</term>
<listitem><para>
Central store of data. That may be a database or a flat filesystem. Without special clients you're not able to read
data in it. For Subversion repositories &kdesvn; is such a client.
</para></listitem>
</varlistentry>
<varlistentry>
<term>Working copy</term>
<listitem><para>
A flat copy of a repository on local filesystem. This is used like any normal filemanager, editing files and so forth.
RCS-information you can read with clients like &kdesvn;.
</para>
<para>
  Remember that subversion does not know anything about KIO, so a working copy must reside in an area where it may reached without any specific protocol, &eg; <quote>fish://</quote> or such is not possible.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WebDav</term>
<listitem><para>
WebDav is a protocol which let you modify files on a remote webserver. Subversion is a special kind of WebDAV when repositories are accessed
via webserver. In normal use this is read-only. With special configurations you may get a read-write enabled WebDAV which you may access via
specialized browser. &kdesvn; is NOT a webdav-client, but &konqueror; is via the <quote>webdav://</quote> protocol. But with &kdesvn; you
may browse through the version tree of a repository (via <quote>http://</quote>)
</para></listitem>
</varlistentry>
</variablelist>
</para>
</sect1>
</chapter>

<chapter id="using-kdesvn">
<title>Using &kdesvn;</title>
<sect1 id="kdesvn-features">
<title>&kdesvn; features</title>
<para>
&kdesvn; understands following protocols for browsing repositories:
<variablelist>

<varlistentry>
<term>http</term>
<listitem><para>
Standard web browser protocol.
</para></listitem>
</varlistentry>

<varlistentry>
<term>https</term>
<listitem><para>
Standard encrypted web browser protocol.
</para></listitem>
</varlistentry>

<varlistentry>
<term>(k)svn+http</term>
<listitem><para>
Standard web browser protocol. May be used to let &konqueror; automatic call &kdesvn;.
</para></listitem>
</varlistentry>

<varlistentry>
<term>(k)svn+https</term>
<listitem><para>
Standard encrypted web browser protocol. May be used to let &konqueror; automatic call &kdesvn;.
</para></listitem>
</varlistentry>

<varlistentry>
<term>(k)svn+file</term>
<listitem><para>
Local repository protocol. May be used to let &konqueror; automatic call &kdesvn;.
</para></listitem>
</varlistentry>

<varlistentry>
<term>(k)svn</term>
<listitem><para>
Subversion's own server protocol.
</para></listitem>
</varlistentry>

<varlistentry>
<term>(k)svn+ssh</term>
<listitem><para>
Subversion over ssh.
</para></listitem>
</varlistentry>

<varlistentry>
<term>file</term>
<listitem><para>
Direct repository access. &kdesvn; checks if a given path is a repository or a working copy and opens it in the right mode. For subversion
  <filename class="directory">file:///dir</filename> and <filename class="directory">/dir</filename> is not the same!
</para></listitem>
</varlistentry>
</variablelist>
</para>
<para>
This list may be used for &URL;s given for <link linkend="kdesvn-commandline">command line</link>, too.
</para>
</sect1>
<sect1 id="first_steps">
<title>Beginning with subversion and &kdesvn;</title>
<para>
  This section is mostly for beginners not familiar with subversion and explains how subversion and/or revision control systems (<acronym>RCS</acronym>) works.
</para>

<sect2>
<title>Creating a working copy</title>
<caution>
<para>
Working copies MUST be accessible via local paths. Subversion does not know anything about pseudo file systems like
<filename class="directory">smb://</filename> or <filename class="directory">fish://</filename>. &kdesvn; translates some of them if possible (like <filename class="directory">system:/home</filename>) but it is not possible over a network.
</para>
</caution>
<para>
First of all you must create a working copy of your repository. For that select

<menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Checkout a repository</guimenuitem>
</menuchoice>. Inside the following dialog you must select the &URL; of the repository you want to use, &eg;, something like
<literal>http://localhost/repos/myproject</literal>. Subfolders of a repository are possible, too, &eg;,
<literal>http://localhost/repos/myproject/trunk</literal> or similar.
</para>
<para>
Select and/or create a local folder, where the working copy should reside.
</para>
<para>
Last but not least, the revision to checkout. Mostly that should be <quote>HEAD</quote>. This ensures that the last stored version
is the referenced version.
</para>
<para>
  After clicking on <guibutton>OK</guibutton> &kdesvn; will create your new working copy and (if the box was checked) opens it.
</para>
<para>
When you have opened a repository for browsing you may mark a folder and than select
<menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Repository</guisubmenu>
<guimenuitem>Checkout current repository path</guimenuitem>
</menuchoice>
and fill out the dialogs as described above. Then only the marked path will checked out.
</para>
</sect2>
<sect2>
<title>Committing local changes</title>
<para>
Mark the entry or entries you want to send and select
<menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>#</keycap></keycombo>
</shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Commit</guimenuitem>
</menuchoice>
</para>
<para>
If you try to commit if no item is selected, &kdesvn; uses the top-most element of opened working copy, &ie;, the working copy path itself.
</para>
<para>
This operation is always recursive, means, if selecting a folder &kdesvn; always send all changed items below it. When you setup that you want to review all items before commit inside the following dialog all items &kdesvn; would send are listed. There you may unmark items you don't want to send. In that case &kdesvn; sends all items alone, &ie;, not recursive. Or you may select items not versioned for add and commit (if them are not marked to be ignored). So you may see if there are newer items you forgot.
</para>
<para>
  Enter a log message what you're sending and hit <guibutton>OK</guibutton> and the transfer starts.
</para>
</sect2>
<sect2>
<title>Update working copy</title>
<para>
This brings you local working copy in sync with the repository. You may setup that &kdesvn; checks on opening a working copy for newer/modified items in repository. This runs in background and you may work meanwhile with &kdesvn;. When this is finished, items with newer versions or folders with items where newer items are below are marked.
</para>
<para>
To retrieve the changes, select
<menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Update to head</guimenuitem>
</menuchoice>. This will update to the most latest version. If you want to get a specific revision select
<menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Update to revision</guimenuitem>
</menuchoice> and select the revision you want in the following box.
</para>
<para>
If no item is selected, the update will done on whole opened working copy, otherwise only recursive on the selected items.
</para>
</sect2>
<sect2>
<title>Adding and Deleting from working copy</title>
<para>
Both operations requires two steps: First add or delete and then committing that changes to repository. Before you commit you may undone add or delete.
</para>
<sect3>
<title>Add items</title>
<para>
Adding items into a working copy may be done due three ways:
<variablelist>
<varlistentry>
<term>Select not versioned items and add them</term>
<listitem><para>
Copy with &konqueror; or any other tool into working copy area. Go trough list, mark them and select
<menuchoice>
<shortcut><keycombo action="simul"><keycap>Insert</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Add selected files/dirs</guimenuitem>
</menuchoice>.
 When you want adding new folders with all subitems select
<menuchoice>
<shortcut><keycombo action="simul">&Ctrl;<keycap>Insert</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Add selected files/dirs recursive</guimenuitem>
</menuchoice>.
</para></listitem>
</varlistentry>

<varlistentry>
<term>Check and add recursive</term>
<listitem><para>
You may check if there are somewhere in working copy unversioned items. After selecting
<menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Check for unversioned items</guimenuitem>
</menuchoice> a dialog appears where all not versioned items are listed. Hitting <guibutton>OK</guibutton> adds all marked items to working copy, items you don't want versioned you should unmark before.
</para></listitem>
</varlistentry>

<varlistentry>
<term>Drag and drop</term>
<listitem><para>
Mark in &konqueror; or any other compatible file browser items you want to add and drag them to &kdesvn;. You may drop them on folders inside the opened working copy and then &kdesvn; copy the dropped items to it and add the items.
</para></listitem>
</varlistentry>
</variablelist>
</para></sect3>
<sect3>
<title>Deleting items from working copy and unversion</title>
<para>
Deleting items is always recursive. For example, when you delete a folder all subitems will be deleted, too. Mark what you want and select
<menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Delete selected files/dirs</guimenuitem>
</menuchoice> menu item. Items will be unversioned and removed from disk.
</para>
</sect3>
</sect2>

<sect2 id="logdisplay">
<title>Displaying logs</title>
<para>
The log display may start with
<keycombo action="simul">&Ctrl;<keycap>L</keycap></keycombo>
when one or none item is marked in overview. Depending on your settings (see <xref linkend="subversion-settings" xreflabel="settings"/>) &kdesvn; retrieves some log entries beginning on <quote>HEAD</quote> and displays them.
</para>
<sect3  id="logdisplay-dlg">
<title>The log display dialog</title>
<para>
  On the left side you see the list of log entries retrieved by &kdesvn;. The log message is stripped-down to one line to fit. The full log message appears in the upper-right window when marking an entry. In the lower-right window you will see the list of changed files. These windows <emphasis>only</emphasis> appear if this list is fetched, depending on your settings.
</para>
<para>
With the buttons on the top you may select another range of logs to display.

<important><para>This range is called without any pre-limit, so be careful when using this feature on large repositories.</para></important>

</para>
<para>
The buttons on the bottom of the dialog always work on the item selected for log, not on the item selected in the list of changed files. So when you select
<guibutton>Diff previous</guibutton> there, it makes the diff over all changed items in this revision if they are equivalent or below the subversion
entry selected before for retrieving logs. Same for <guibutton>Diff revisions</guibutton>.
</para>
<para>
<guibutton>Annotate</guibutton> of course works only if item to log is a file.
</para>
<para>
  On all list entries (both lists) you have context menu enabled for some extra operations. In left list this is <guimenuitem>Set version as left side of diff</guimenuitem> (&ie; beginning revision) and <guimenuitem>Set version as right side of diff</guimenuitem> (&ie; end or target of diff, in unified the part marked with a <computeroutput>+++</computeroutput>). If you selected these revisions them are marked with some small arrows.
</para>
</sect3>
</sect2>
</sect1>

<sect1 id="working-with-repositories">
<title>Working on repositories</title>
<para>
  Simple repository browsing may be done within &konqueror;, &dolphin; or similar file browsers: Open a URL with protocol described in <xref linkend="kdesvn-features" xreflabel="Features" /> (the variants starting with <quote>k</quote>) and them will display the content. So simple operations like copy, move and delete may work. When appending a query <quote>?rev=<replaceable>xxx</replaceable></quote> the listing comes from a specific revision. Format of revision-query is described in <xref linkend="revision-syntax" />, some more information about KIO::ksvn are in <xref linkend="kdesvn-kio" />
</para>
<para>
All work except <guimenuitem>Copy</guimenuitem> may only done when browsing at revision HEAD.
</para>
<sect2>
<title>Restoring deleted items</title>
<para>
In subversion restoring deleted items is a copy operation of item at specific revision. So when you plan restoring view repository at revision before item was deleted. Select
<menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Repository</guisubmenu>
<guimenuitem>Select browse revision</guimenuitem>
</menuchoice>
and enter the wanted revision. Now &kdesvn; displays the content at this term. Mark the entry you want to restore, select
<menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>C</keycap></keycombo>
</shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Copy</guimenuitem>
</menuchoice>. Inside the following dialog the target is always at HEAD revision, the source is at revision you selected for browsing. Fill in the path and click <guibutton>OK</guibutton> and copy starts. After successful copy switch browsing back to HEAD revision and the restored item should appear.
</para>
</sect2>
<sect2>
<title>Importing folders</title>
<para>
Due restrictions of subversion itself only folders, not single files, may imported.
</para>
<sect3>
<title>With drag and drop</title>
<para>
Mark in any compatible file manager the folder you want to import and drag it to the folder entry in &kdesvn; where you want to import it.
</para>
</sect3>
<sect3>
<title>Select folder to import with directory-browser</title>
<para>
Mark the folder where you want to import a new folder. Then select
<menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Import folders into current</guimenuitem>
</menuchoice> and select your wanted folder.
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="operations">
<title>Other Operations</title>
<sect2 id="merging-items">
<title>Merge</title>
<para>
Open repository or working copy, mark item you want to merge and select
<menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guisubmenu>Merge</guisubmenu>
</menuchoice>.
  Enter in the following dialog the values wanted. If opened from repository, source 1 and source 2 are filled, when open from within working copy, target is filled with current selected item. The handling of this parameter is a little bit different between using the internal diff of subversion or an external merge-program like &kdiff3;. The target must ALWAYS a local folder or file. You may switch between external or internal merge with the check box <guilabel>Use external merge</guilabel>.
</para>
<sect3>
<title>Internal merge</title>
<para>
The meaning is exactly like from within subversion's own command line tool. When source1 and source2 are equal, start and endrevision must different. If sources aren't equal, start-revision is assigned to source1 and end-revision to source2. The target MUST be a working copy otherwise subversion will send an error message.
</para>
<para>
The check boxes have following meanings:
<variablelist>

<varlistentry>
<term>Recursive</term>
<listitem><para>
Do all operations recursive when working with folders.
</para></listitem>
</varlistentry>

<varlistentry>
<term>Handle unrelated as related items</term>
<listitem><para>
If set, unrelated items will be diffed as if they were related. Otherwise subversion will remove one side and add it on other side again.
</para></listitem>
</varlistentry>

<varlistentry>
<term>Force delete on modified/unversioned items</term>
<listitem><para>
If not set and merge would require deletion of an modified or unversioned item the subversion merge fails. Otherwise this items will be deleted.
</para></listitem>
</varlistentry>

<varlistentry>
<term>Just dry run without modifications</term>
<listitem><para>
If set, subversion sends only notifications what it would do but doesn't modify the working copy.
</para></listitem>
</varlistentry>
</variablelist>

</para>
</sect3>
<sect3>
<title>Using external program for merge</title>
<para>
See <xref linkend="diffmerge-settings"/> for details how to setup the external merge tool. &kdesvn; generates the command line as described there. Before it does following:
</para>
<para>
<orderedlist>

<listitem><para>
Assign start-revision as revision to source 1 and end-revision to source 2. Then checks if them are different (path and/or revision). If yes, it is a three-way merge otherwise a simple merge from source to target. If source 2 is left empty it is a simple merge, too.
</para></listitem>

<listitem><para>
Make an export into temporary folder. If it is a simple merge only source 1 at start-revision, otherwise both sources with their revisions. If item is a file and not a folder then get the content at a specific revision.
</para></listitem>

<listitem>
<para>
  Generate the call to your external merge program as you setup in <link linkend="diffmerge-settings">Settings</link>. The error output will displayed in log window so you may see what is going wrong (if something is gone wrong).
</para>
</listitem>
</orderedlist>

In difference to internal merge target may a flat folder/file not under version control because external tools do not care about it.
</para>
<para>
If recursive is not set, the export is done as a flat export. Be care: when doing this with working copies externals will <emphasis>not</emphasis> be exported.
</para>
</sect3>
</sect2>

<sect2 id="op-resolve">
<title>Resolving conflicts</title>
<para>
&kdesvn; itself hasn't a module for resolving conflicts but you may use external software from within &kdesvn;. In <xref linkend="extern-resolve-setup"/> is a description how to setup up this application.
</para>
<para>
  When marking an item with status set to <quote>conflicted</quote> (you'll see a red cross in listview on such items) you may select
<menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guisubmenu>Resolve conflict</guisubmenu>
</menuchoice>.
or from within context menu <guimenuitem>Resolve conflict</guimenuitem> (only on conflicted items)
&kdesvn; now starts the program you setup (or the default one). After finish this job you should mark item as resolved
(<menuchoice><guimenu>Subversion</guimenu><guisubmenu>Working copy</guisubmenu><guisubmenu>Mark resolved</guisubmenu></menuchoice>) otherwise you will not able to commit your changes.
</para>
</sect2>

</sect1>

<sect1 id="used-properties">
<title>Properties used by &kdesvn; for configuration</title>
<sect2>
<title>Bugtracker integration</title>
<para>The <ulink url="http://tortoisesvn.tigris.org/">TortoiseSVN project</ulink> designed a nice property system
<ulink url="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-bugtracker.html"> for integrating bugtracker</ulink> into
subversion GUI. The current version of &kdesvn; does not support extra fields in commit box (will follow later) and doesn't understand all but following properties:
</para>
<para>
<table id="bugtracker-properties">
<title>Bugtracker Integration Properties</title>
<tgroup cols="3">

<thead>
<row>
<entry>Property</entry>
<entry>Description</entry>
<entry>Example</entry>
</row>
</thead>
<tbody>
<row>
<entry><literal>bugtraq:url</literal></entry>
<entry>Holds the &URL; to bugtracker. It has to contain the <literal>%BUGID%</literal> marker.</entry>
<entry>https://bugs.kde.org/show_bug.cgi?id=%BUGID%</entry>
</row>

<row>
<entry><literal>bugtraq:logregex</literal></entry>
<entry>
<para>Contains one or two regular expressions, separated by a newline.</para>
<para>If only one expression is set, then the bare bug ID's must be matched in the groups of the regex string. If two expressions are set, then the first expression is used to find a string which relates to the bug ID but may contain more than just the bug ID (&eg; <quote>Issue #123</quote> or <quote>resolves issue 123</quote>). The second expression is then used to extract the bare bug ID from the string extracted with the first expression.</para>
<para>Please keep care about not wanted spaces after the regular expression and don't forget the brackets around the number description.</para>
</entry>
<entry>
<para>
  Single (usable with TRAC):
</para>
<programlisting>
#(\d+)
</programlisting>
<para>
  Now all numbers like <replaceable>#190</replaceable> will parsed and translated to an &URL; in log output.
</para>
<para>
Two expressions:
</para>
<programlisting>
[Ii]ssue #?(\d+)(,? ?#(\d+))*
(\d+)
</programlisting>
<important>
  <title>Remember</title>
  <para>
    Keep care of white spaces after the <literal>(\d+)</literal>! This is one of the most common errors causing these expressions do not match!
  </para>
</important>
</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para>
On local opened repositories (&ie; <filename class="directory">file://</filename> protocol) and on working copies these properties will searched upward from opened folder until found or the subversion top level is reached. On repositories opened via network (all except <filename class="directory">file://</filename> protocol) it is only searched on opened folder itself.
</para>
<para>
Support for multiple sets of these properties may follow later, (&eg;, in subfolder extra values for other tracker &etc;) but in most cases evaluating single tracker links should be enough.
</para>
</sect2>
</sect1>

<sect1 id="revision-tree">
<title>The revision tree</title>
<para>
The revision tree try to display the whole history of an item so user may get a better feeling about the history of an item. It has to scan the complete log of the repository 'cause it requires some information subversion does not (and I think will not) give. Because this produces a lot of traffic the revision tree uses always the internal <link linkend="logcache-descr">log cache</link>.
</para>
<sect2>
<title>Requirements</title>
<para>
The revision tree is generated via <application>dot</application>. So for a working revision tree the <application>graphviz</application> package must installed.
</para>
</sect2>
</sect1>

<sect1 id="logcache-descr">
<title>Internal log cache</title>
<para>
  &kdesvn; may use an internal log cache for some operations. Mostly it is used for <link linkend="revision-tree">the revision tree</link> but when viewing simplified log in offline mode, too. The caches are organized as <application>SQLite</application> databases stored in <filename class="directory">$HOME/.sqvnqt/logcache</filename>. Every numbered file is a storage for a different repository.
</para>
<warning>
  <para>
    The databases may get large! So you may disable automatic update of log cache in settings.
  </para>
</warning>
<para>
  You may simply remove a database, than no cached log will be given back for that repository (and no revision tree!) but when you do not disable automatic filling the cache on next open this repository or an associated working copy of it the cache will be refilled again.
</para>
<sect2>
<title>Offline mode</title>
<para>&kdesvn; may work without network access, &ie; you can switch off the network access for &kdesvn;. This may be useful when working without network like on notebooks. In such cases &kdesvn; always gets the logs from the internal cache. This log is reduced to base functions due to technical reasons, so the cached log may (but not must) differ from real log. Differ means that it will not display all copy operations even <guilabel>Log follows node changes</guilabel> is set.</para>
</sect2>
<sect2>
<title>Log cache and revision tree</title>
<para>
  The revision tree will only use the log cache because otherwise it must get always the logs again. It will <emphasis>not</emphasis> refresh the log cache (but this may changed in later releases).
</para>
</sect2>
</sect1>

<sect1 id="overlay-meaning">
<title>Meaning of icon overlays</title>
<para>
  Entries may be marked with overlayed icons when not in <quote>normal</quote> state.
<variablelist>

<varlistentry>
<term><inlinemediaobject>
<imageobject>
<imagedata fileref="hi128-filesys-kdesvnlocked.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Locked</phrase>
</textobject>
</inlinemediaobject>
</term>
<listitem><para>
This entry is locked. In last column the owner of lock is listed. You may setup if &kdesvn; should check for locked items in repository, too. But be careful: depending of the kind of the server this may take a long time!
</para></listitem>
</varlistentry>

<varlistentry>
<term><inlinemediaobject>
<imageobject>
<imagedata fileref="hi128-filesys-kdesvnneedlock.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Needs locked</phrase>
</textobject>
</inlinemediaobject>
</term>
<listitem><para>
This entry must be locked before edit and commit. Until you'll not set a lock subversion keeps it read-only.
</para></listitem>
</varlistentry>

<varlistentry>
<term><inlinemediaobject>
<imageobject>
<imagedata fileref="hi128-filesys-kdesvnupdates.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Updates</phrase>
</textobject>
</inlinemediaobject>
</term>
<listitem><para>
This entry or - if a folder - an entry below has newer version in repository.
</para></listitem>
</varlistentry>


<varlistentry>
<term><inlinemediaobject>
<imageobject>
<imagedata fileref="hi128-filesys-kdesvnmodified.png" format="PNG" />
</imageobject>
<textobject>
<phrase>Modified</phrase>
</textobject>
</inlinemediaobject>
</term>
<listitem><para>
This entry or - if a folder - an entry below was changed on local disc.
</para></listitem>
</varlistentry>

<varlistentry>
<term><inlinemediaobject>
<imageobject>
<imagedata fileref="hi128-filesys-kdesvnadded.png" format="PNG" />
</imageobject>
<textobject>
<phrase>overlay added</phrase>
</textobject>
</inlinemediaobject>
</term>
<listitem><para>
This entry is locally added to subversion but not yet committed.
</para></listitem>
</varlistentry>

<varlistentry>
<term><inlinemediaobject>
<imageobject>
<imagedata fileref="hi128-filesys-kdesvndeleted.png" format="PNG" />
</imageobject>
<textobject>
<phrase>overlay deleted</phrase>
</textobject>
</inlinemediaobject>
</term>
<listitem><para>
This entry is locally deleted from subversion but hasn't yet been committed.
</para></listitem>
</varlistentry>

<varlistentry>
<term><inlinemediaobject>
<imageobject>
<imagedata fileref="hi128-filesys-kdesvnconflicted.png" format="PNG" />
</imageobject>
<textobject>
<phrase>overlay deleted</phrase>
</textobject>
</inlinemediaobject>
</term>
<listitem><para>
This entry (or entry below if folder) got conflicts to resolve with last update.
</para></listitem>
</varlistentry>

</variablelist>

</para>
</sect1>

<sect1 id="kdesvn-passwords">
<title>&kdesvn; and passwords</title>
<para>
&kdesvn;/subversion is able to save passwords. Saving passwords is always a security risk, but may let a graphical frontend more usable.
</para>
<sect2>
<title>Not saving passwords</title>
<para>
  Most secure way, but sometimes unhandy with GUIs like &kdesvn;. In particular the background processes of &kdesvn; would always ask for a password in case the repository has restricted access for reading operations like update and status. The same for <quote>commit</quote> and so on. So if you are not saving passwords you should disable <guilabel>Start check for updates when open a working copy</guilabel> and <link linkend="subversion-settings">so on</link>.
</para>
</sect2>
<sect2>
<title>Saving passwords in &kwallet5;</title>
<para>
  Secured password storage used by a lot of &kde; programs like &kmail; and &konqueror;. If you are saving passwords and mostly using &kdesvn; you should use this. Keep care that the encrypted storage isn't a high-secure storage. Details see <ulink url="help:/kwallet5">&kwallet5; documentation</ulink>.
</para>
</sect2>
<sect2>
<title>Saving to subversion's own password storage</title>
<para>
  This is not recommended 'cause the passwords are stored as clear text! Not believing? Take a look into the files in <filename class="directory">~/.subversion/auth/svn.simple</filename>. You should only use this if you are frequently using other clients than &kdesvn; like <application>rapidsvn</application> or <application>esvn</application> or the original <application>svn</application> command line client. If you're using the command line client mostly for checkouts or updates which do not require a password and &kdesvn; for commit/move/copy you should use &kwallet5; instead.
</para>
</sect2>
<sect2>
<title>Internal password cache</title>
<para>
You may activate an internal password cache which will hold passwords as long &kdesvn; is running in memory. So you must not enter a password twice even if you didn't save it in wallet.
</para>
</sect2>
<sect2>
<title>Special case svn+ssh</title>
<para>
When using subversion via svn+ssh password storage may done via ssh and ssh-agent. For this you must have ssh access to the remote machine and repository. When want to store something you should use the public key authentication of ssh, not the password authentication. (In fact ssh prefer the public key authentication). For this you must put your public ssh-key on the target, &eg;, the repository system. SSH passwords will never be handled by subversion passwords storage or &kwallet5; or internal password cache.
</para>
<para>
If you don't want asked for the password of your SSH key you can use the <application>ssh-agent</application>, with selecting the menu
<menuchoice><guimenu>
Subversion
</guimenu>
<guimenuitem>Add ssh identities to ssh-agent</guimenuitem></menuchoice>
you may store your SSH-key password for your current session so no further entering of your password is needed.
</para>
</sect2>
</sect1>
</chapter>

<chapter id="kdesvn-kio">
<title>&konqueror;, KIO, &kdesvn;</title>
<sect1 id="kdesvn-kio-desc">
<title>Description</title>
<para>
As of version 0.7.0 of &kdesvn; it comes with some modules integrating some commands directly into &konqueror; menus.
<variablelist>
<varlistentry>
<term>KIO protocols</term>
<listitem><para>Implements handlers for the following protocols:</para>
<itemizedlist>
<listitem><para>ksvn+http</para></listitem>
<listitem><para>ksvn+https</para></listitem>
<listitem><para>ksvn+file</para></listitem>
<listitem><para>ksvn+ssh</para></listitem>
<listitem><para>ksvn</para></listitem>
</itemizedlist>

<para>
These protocols are designed only for repositories, not for working copies. For example, <filename class="directory">ksvn+file:///<replaceable>path</replaceable></filename> must point to the beginning of a repository different to the application itself or KPart.
Working copies may browsed with &konqueror;.
</para>
<para>
For browsing at a specific revision you may append the query <link linkend="revision-syntax"><quote>?rev=<replaceable>revision</replaceable></quote></link> to the &URL;.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Context menus</term>
<listitem><para>
&kdesvn; installs context menus for &konqueror;. Them may be seen with right mouse click in the browser window (only in standard view, not any KPart) so it is possible to do most used actions direct from within &konqueror; (or any other file managers that read &konqueror; context menus like &dolphin;). This is done via a call
to the <link linkend="kdesvn-commandline">command line variant of &kdesvn;</link>.
</para>
</listitem>
</varlistentry>
</variablelist>
</para>
<sect2>
<title>Usage of KIO outside &konqueror; - an example</title>
<para>
Every application which uses the KIO library may use these protocols. So it would be possible to retrieve all differences between two revisions with &kdiff3; without any deep knowledge.
</para>
<para>
<example>
<title>Retrieving differences between revisions using &kdiff3; and KIO::ksvn</title>
<programlisting>
kdiff3 \
  ksvn://anonsvn.kde.org/home/kde/trunk/KDE/arts?rev=423127 \
  ksvn://anonsvn.kde.org/home/kde/trunk/KDE/arts?rev=455064
</programlisting>
<para>
  Let &kdiff3; print all differences between two revisions.
</para>
<para>
<note>
  <para>
    Using this within &kdesvn; (diff'ing two revisions) is MUCH faster because the internal mechanisms of subversion are used.
  </para>
</note>
</para>
</example>
</para>
</sect2>
</sect1>
<sect1 id="kio-svn-special">
<title>Programmers information about KIO::ksvn</title>
<note><para>You may skip this if not interested in KIO programming.</para></note>
<para>
KIO::ksvn::special knows the following operations.
</para>
<sect2>
<title>Command list</title>
<para>
<table id="kio-svn-special-commands">
  <title>Command overview for <literal>KIO::ksvn::special</literal></title>
<tgroup cols="4">

<thead>
<row>
<entry>Command name</entry>
<entry>Numeric id</entry>
<entry>Parameter list</entry>
<entry>Implemented in the current version?</entry>
</row>
</thead>

<tbody>

<row>
<entry>Checkout</entry>
<entry>1</entry>
<entry>
<para>
KURL repository, KURL target, int revnumber, QString revkind
</para>
<para>
The target will <emphasis>not</emphasis> be modified, &eg;, but the content will be checked out without creating a subfolder! For example, the source may be
<filename>http://server/repos/project/trunk</filename>, target <filename>/home/user/proj/</filename> then the contents of trunk will copied into <filename>/home/user/proj/</filename> not
<filename>/home/user/proj/trunk/</filename>!
</para>
</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Update</entry>
<entry>2</entry>
<entry><para>KURL url, int revnum, QString revstring</para>
<para>
If revnum &lt; 0 the revstring is parsed.
Format of revstring is described in <link linkend="revision-syntax">Appendix</link>.
</para>
</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Commit</entry>
<entry>3</entry>
<entry><para>KURL::List urls</para>
<para>urls is a list of local urls to commit. Will ask for log message.</para>
</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Log</entry>
<entry>4</entry>
<entry>
<para>
int startrevnumber, QString startrevstring, int endrevnumber, QString endrevstring, KURL::List
</para>
<para>
Use this with care - this may produce a lot of data.
</para>
</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Import</entry>
<entry>5</entry>
<entry>KURL targetrepository, KURL sourcepath</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Add</entry>
<entry>6</entry>
<entry>KURL</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Del</entry>
<entry>7</entry>
<entry>KURL::List</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Revert</entry>
<entry>8</entry>
<entry><para>KURL::List</para>
<para>Revert in KIO is always non-recursive, no questions (calling app must do it itself)</para>
</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Status</entry>
<entry>9</entry>
<entry><para>KURL item, bool checkRepos, bool recurse</para>
<para>item - the item whos info should be checked, checkRepos - check if there are newer versions in the repository, recurse - whether to check recursive or not.</para>
</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Mkdir</entry>
<entry>10</entry>
<entry>KURL::List</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Resolve</entry>
<entry>11</entry>
<entry>KURL, bool recursive</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Switch</entry>
<entry>12</entry>
<entry>KURL working_copy_path, KURL new_repository_url, bool recursive,int revnumber, QString revkind</entry>
<entry>Yes</entry>
</row>

<row>
<entry>Diff</entry>
<entry>13</entry>
<entry>
<para>URL uri1, KURL uri2, int r1, QString rstring1, int r2, QString rstring 2, bool recursive</para>
<para>For difference between repository file:/// and working copy setup working copy urls without a protocol!</para>
</entry>
<entry>Yes</entry>
</row>
</tbody>

</tgroup>
</table>

</para>
</sect2>
<sect2>
<title>Return values</title>
<para>
Return values may be given via metadata, see apidoc for details.
</para>
<para>
<table id="kio-ksvn-metadata">
<title>Content of metadata</title>
<tgroup cols="2">

<thead>
<row>
<entry>Key</entry>
<entry>Possible value</entry>
</row>
</thead>

<tbody>

<row>
<entry>path</entry>
<entry>Path of the item action was made on, &eg; given url</entry>
</row>

<row>
<entry>action</entry>
<entry>Numeric action type</entry>
</row>

<row>
<entry>kind</entry>
<entry>kind of item (mostly folder or file)</entry>
</row>

<row>
<entry>mime_t</entry>
<entry>Subversion mimetype of item</entry>
</row>

<row>
<entry>content</entry>
<entry>State of content (subversion value)</entry>
</row>

<row>
<entry>prop</entry>
<entry>State of properties (subversion value)</entry>
</row>

<row>
<entry>rev</entry>
<entry>Resulting revision or revision worked on</entry>
</row>

<row>
<entry>string</entry>
<entry>Internal defined human readable message.</entry>
</row>

<row>
<entry>loggedaction</entry>
<entry>Subversion defined action string on item (A,M,D)</entry>
</row>
<row>
<entry>loggedcopyfrompath</entry>
<entry>If copied from which path? (may be empty)</entry>
</row>
<row>
<entry>loggedcopyfromrevision</entry>
<entry>If copied at which revision? (may be &lt; 0)</entry>
</row>
<row>
<entry>loggedpath</entry>
<entry>On which single path the entries logged action and so on are set. (path is set to the calling url)</entry>
</row>
<row>
<entry>diffresult</entry>
<entry>a line of difference output</entry>
</row>
</tbody>

</tgroup>
</table>

</para>
</sect2>
</sect1>
</chapter>

<chapter id="kdesvn-commandline">
<title>Using &kdesvn; via command line</title>
<sect1 id="kdesvn-commandline-overview">
<title>Overview</title>
<para>
  Some subversion operations may be used via the command line, &eg;, like a standard command line client but user interaction is made through the <acronym>UI</acronym>. The standard syntax is <userinput>kdesvn exec <replaceable>command</replaceable> <replaceable>parameter</replaceable> <replaceable>url</replaceable></userinput>.
</para>
<para>
If a single revision on a single &URL; is wanted it may be set as a parameter of the &URL;
<programlisting>svn://your-server/path-to-repository/item?rev=&lt;your-rev&gt;</programlisting> This will overwrite the option <option>-r &lt;rev&gt;</option>.
</para>
<para>
A revision may be given as
a number or one of <option>HEAD</option> or <option>BASE</option> or as date format like {YYYY-MM-DD}.
</para>
</sect1>
<sect1 id="kdesvn-command-list">
<title>Command list</title>
<para>
  If in following overview as possible parameter <option>-r <replaceable>revision</replaceable></option> is given, this revision may be set as <userinput><replaceable>url</replaceable>?rev=<replaceable>the-revision</replaceable></userinput>.
<table id="svn-commands-table">
<title>Subversion commands</title>
<tgroup cols="3">

<thead>
<row>
<entry>Command</entry>
<entry>Meaning</entry>
<entry>Accepted options</entry>
</row>
</thead>

<tbody>
<row>
<entry>commit (or ci)</entry>
<entry>commit changes of item to repository</entry>
<entry></entry>
</row>
<row>
<entry>log</entry>
<entry>Print log of item</entry>
<entry>-r startrevision:endrevision -l limit_display</entry>
</row>
<row>
<entry>cat</entry>
<entry>Display content of item</entry>
<entry>-r revision </entry>
</row>
<row>
<entry>copy (or cp)</entry>
<entry>Copy item inside working copy or repository. If target isn't given, &kdesvn; will prompt.</entry>
<entry></entry>
</row>
<row>
<entry>move (or mv, rename)</entry>
<entry>Move/Rename item inside working copy or repository. If target isn't given, &kdesvn; will prompt.</entry>
<entry></entry>
</row>
<row>
<entry>get</entry>
<entry>Get content of item and save it</entry>
<entry>-r revision -o &lt;outputfile&gt; (output is required!)</entry>
</row>
<row>
<entry>blame (or annotate)</entry>
<entry>annotate file</entry>
<entry>-r startrevision:endrevision</entry>
</row>
<row>
<entry>update</entry>
<entry>Update item in working copy</entry>
<entry>-r revision</entry>
</row>
<row>
<entry>diff</entry>
<entry>Diff two revisions of item or diff two items at specific revision</entry>
<entry>-r startrev:endrev</entry>
</row>
<row>
<entry>info</entry>
<entry>Detailed information about the item</entry>
<entry>-r revision</entry>
</row>
<row>
<entry>checkout (or co)</entry>
<entry>Checkout repository-path into a new working copy path. Target path and source revision will be asked for.</entry>
<entry></entry>
</row>
<row>
<entry>checkoutto (or coto)</entry>
<entry>Checkout repository-path into a new working copy path. The difference of the source path and source revision will be asked for.</entry>
<entry></entry>
</row>
<row>
<entry>export</entry>
<entry>Export repository- or working copy-path into directory. Target path and source revision will be asked for.</entry>
<entry></entry>
</row>
<row>
<entry>exportto</entry>
<entry>Export repository- or working copy-path into directory. Source path and source revision will be asked for.</entry>
<entry></entry>
</row>
<row>
<entry>delete (del, remove, rm)</entry>
<entry>delete url(s) from repository or working copy.</entry>
<entry></entry>
</row>
<row>
<entry>add</entry>
<entry>add &URL; to working copy. &URL; must belong to a working copy (its not an import!)</entry>
<entry></entry>
</row>
<row>
<entry>revert (or undo)</entry>
<entry>undone current changes to working copy. May only used on working copy urls!</entry>
<entry></entry>
</row>
<row>
<entry>checknew (or addnew)</entry>
<entry>check in given &URL; for new, unversioned items and add them to working copy if wanted.</entry>
<entry></entry>
</row>
<row>
<entry>tree</entry>
<entry>displays revision tree of item (only first argument), if &URL; with <quote>?rev=<replaceable>xxx</replaceable></quote> given, this revision is the peg-revision.</entry>
<entry>-r startrev:endrev</entry>
</row>
<row>
<entry>lock</entry>
<entry>lock url(s), if <option>-f</option> is given then existing locks are broken.</entry>
<entry>-f</entry>
</row>
<row>
<entry>unlock</entry>
<entry>unlock url(s), if <option>-f</option> is given then not owned locks are broken or non
 existing locks are ignored.</entry>
<entry>-f</entry>
</row>
<row>
<entry>help</entry>
<entry>displays this page</entry>
<entry></entry>
</row>
</tbody>
</tgroup>

</table>

<table id="parameter-list">
<title>Parameter for subversion commands</title>
<tgroup cols="3">
<thead>
<row>
<entry>Parameter</entry>
<entry>Possible values</entry>
<entry>allowed for</entry>
</row>
</thead>
<tbody>
<row>
  <entry><option>-r</option></entry>
<entry><replaceable>revision</replaceable> or <replaceable>startrev:endrev</replaceable></entry>
<entry>all except commit</entry>
</row>
<row>
  <entry><option>-R</option></entry>
<entry>(none)</entry>
<entry>all except commit</entry>
</row>
<row>
<entry><option>-o</option></entry>
<entry><replaceable>filename</replaceable></entry>
<entry>get</entry>
</row>
<row>
<entry><option>-l</option></entry>
<entry><replaceable>number</replaceable></entry>
<entry>log</entry>
</row>
<row>
<entry><option>-f</option></entry>
<entry>(none)</entry>
<entry>(un-)lock</entry>
</row>

</tbody>
</tgroup>
</table>

</para>
<sect2>
  <title>The <quote>log</quote> command</title>
<para>
Log command displays a dialog containing the log of the given &URL;. With subversion 1.2 or above it accepts a limit, &ie; how many entries it has to display.
</para>
<para>
Inside that dialog you may select log entries and get the differences between them.
<example>
<title>Display the last 20 commit logs</title>
<programlisting>
kdesvn exec log -l 20 -r HEAD&#058;1 myfile.c
</programlisting>
<para>Beware of order of revision: You want go from HEAD to START for the LAST one. So you must give revision HEAD as starting point, otherwise you would get
the first 20 entries.</para>
</example>
</para>
</sect2>
<sect2>
  <title>The <quote>diff</quote> command</title>
<para>
You get differences between revisions of an item or between two items inside same working copy or repository. When diff'ing revisions of an item, revisions may be given as <option>-r <replaceable>STARTREV</replaceable>:<replaceable>ENDREV</replaceable></option>. When diffing an item inside a working copy without any revisions it prints the diff against repository.
<example>
<title>Print difference against repository, &ie; local changes</title>
<programlisting>
kdesvn exec diff myfile.c
</programlisting>
</example>
<example>
<title>Print difference between revisions</title>
<programlisting>
kdesvn exec diff -r 21:20 myfile.c
</programlisting>
</example>
</para>
<para>
When diffing two items revisions may be appended to &URL; of items. &eg;:
<programlisting>http://server/path/item?rev=HEAD</programlisting>
<example>
<title>Diffing two tagged versions</title>
<programlisting>
kdesvn exec diff http://www.alwins-world.de/repos/kdesvn/tags/rel_0_6_2 http://www.alwins-world.de/repos/kdesvn/tags/rel_0_6_3
</programlisting>
</example>
</para>
</sect2>
</sect1>
</chapter>

<chapter id="setup">
<title>Settings</title>
<para>
Settings can be changed from the setup dialog. They are separated into some subdialogs.
</para>
<sect1 id="general-settings">
<title>General</title>
<para>
<informaltable id="General-setup-items">
<tgroup cols="2">
<tbody>
<row>
<entry>Size of listviewicons</entry>
<entry>How big (square) the icons in main list view should be</entry>
</row>
<row>
<entry>Show file info</entry>
<entry>If a small tooltip should appear when moving mouse over an item</entry>
</row>
<row>
<entry>Mark item status with icon overlay</entry>
<entry>When an item isn't in normal subversion state it may get an overlay. (See <xref linkend="overlay-meaning" />)</entry>
</row>
<row>
<entry>Items sorting order is case sensitive</entry>
<entry>If the sort order in main window is case sensitive or not, &ie; if <quote>a</quote> not equal to <quote>A</quote>.</entry>
</row>
<row>
<entry>Display ignored files</entry>
<entry>Show items marked in subversion for ignore or not.</entry>
</row>
<row>
<entry>Maximum log messages in history</entry>
<entry>How many log messages &kdesvn; should remember.</entry>
</row>
<row>
<entry>Display colored annotate</entry>
<entry>Use colors defined in the settings dialog for annotations.</entry>
</row>
<row>
<entry>Use navigation panel</entry>
<entry>Toggle the display of the repository tree view.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</para>
</sect1>

<sect1 id="subversion-timedjobs-settings">
<title>Subversion and timed jobs settings</title>

<table id="subversion-settings">
<title>Subversion</title>
<tgroup cols="2">

<tbody>

<row>
<entry>Start check for updates when open a working copy</entry>
<entry>When open a working copy start a check for updates in background</entry>
</row>
<row>
<entry>Start fill log cache on open</entry>
<entry>If set &kdesvn; start (re-)filling the log cache when open a repository or working copy if repository &URL; is not assigned local (<filename class="directory">file://</filename>)</entry>
</row>
<row>
  <entry>Check if items has <quote>svn:needs-lock</quote> set</entry>
<entry>Check on working copies if an item has this property set and if yes, displays a special overlayed icon. Setting this may let listings get real slow.</entry>
</row>
<row>
<entry>Get file details while remote listing</entry>
<entry>When checked, &kdesvn; get more detailed info about file items when making a listing to remote repositories. So you may see remote locks in overview. Be careful: This may let listings REAL slow!</entry>
</row>

<row>
<entry>Gain item info recursive</entry>
<entry>When activated, <command>info</command> on folders will gain information about all items below, may be real slow.</entry>
</row>

<row>
<entry>Store passwords for remote connections</entry>
<entry>Storing passwords is often a security problem. Subversion stores its passwords into a flat file, &ie; passwords in the plain text! So be careful setting this flag and see next entry, too. This item only says if saving passwords is the default, you may change it for specific realms inside login dialog.</entry>
</row>

<row>
<entry>Store passwords into KDE Wallet</entry>
<entry>When saving passwords, the plain text file from subversion is a security hole. &kdesvn; is able saving them into encrypted &kde; wallet instead there (starting with version 0.12.0) and use them. On other hand other subversion clients aren't able reading them so you must enter them if using tools like <application>svn</application> command line tool or <application>rapidsvn</application>, too. As long as subversion does not encrypt password storage you should think twice about it.</entry>
</row>

<row>
<entry>Use internal password cache</entry>
<entry>When a password is not stored persistent &kdesvn; may hold it until &kdesvn; ends, so you may not need to enter it again for each operation. This cache is never persistent, &ie; it will not be saved anywhere.</entry>
</row>

<row>
<entry>Log follows node changes</entry>
<entry>If checked log follows copy operations.</entry>
</row>

<row>
<entry>Log always reads list of changed files</entry>
<entry>The log command may read list of changed files in commit. This is useful and in most cases it cost not real more traffic.</entry>
</row>

<row>
<entry>Review items before commit</entry>
<entry>When doing a commit &kdesvn; may make a check what to do. For example, if unversioned items are below which may be added, list items changed and current operation will commit. This cost a depending on tree more or less time.</entry>
</row>

<row>
<entry>Hide new items in commit box</entry>
<entry>Should unversioned items displayed in commit dialog or not.</entry>
</row>

<row>
<entry>Update modifies instead of conflicts</entry>
<entry>If set, a local addition at the same path as an
incoming addition of the same node kind results in a normal node with a
possible local modification, instead of a tree conflict.</entry>
</row>

<row>
<entry>Update makes missing parents</entry>
<entry>If set, create any non-existent parent directories
also by checking them out at depth=empty</entry>
</row>

</tbody>

</tgroup>
</table>

<table id="timejobs-settings">
<title>Timed jobs</title>
<tgroup cols="2">
<tbody>
<row>
<entry><para>Check modified items every N seconds</para> <para>Check for updated items every N seconds</para></entry>
<entry>If set check for updates or modified items in working copy when network is enabled on regular base</entry>
</row>
</tbody>
</tgroup>
</table>

</sect1>

<sect1 id="diffmerge-settings">
<title>Diff &amp; Merge</title>
<para>
<variablelist>

<varlistentry>
<term>Diff ignores content type</term>
<listitem><para>
Only interesting when diff are made with subversion itself. When set, than subversion diff ignores the content type of entries. Otherwise it will not output
diffs from binaries.
</para></listitem>
</varlistentry>

<varlistentry>
<term>Diff in revision tree is recursive</term>
<listitem><para>
When set, diffs made from within revision tree view are made recursive like in all other cases, too. Otherwise only changes belonging to that folder items are shown. How that is made depends on how you let diffs generate (from subversion itself or from external viewers).
</para></listitem>
</varlistentry>
<varlistentry>
<term>Diff ignores white space changes</term>
<listitem>
<para>
  Ignore changes in the amount of white space (option <option>-b</option> to <application>diff</application>)
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Diff ignores all white spaces</term>
<listitem>
  <para>Ignore all white space (option <option>-w</option> to diff)</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Prefer external merge program</term>
<listitem>
<para>Set if merge with external program is preferred and not Subversion's merge</para>
</listitem>
</varlistentry>
<varlistentry>
<term>Use Git diff format</term>
<listitem>
<para></para>
</listitem>
</varlistentry>
<varlistentry>
<term>Show copies as add</term>
<listitem>
<para></para>
</listitem>
</varlistentry>
</variablelist>

</para>
<sect2>
<title>Use external diff display</title>
<para>
Selects an external application to display diffs. Default is &kompare;.
</para>
</sect2>
<sect2>
<title>External diff display</title>
<para>
Defines what &kdesvn; is using for external display of differences and how it will be called. There are three ways:
</para>
<para>
<variablelist>
<varlistentry>
<term>&lt;program&gt; &lt;parameter&gt;</term>
<listitem><para>
The difference will generated with subversion and put direct into standard input of the external program (&ie;, no temporary files needed)
</para></listitem>
</varlistentry>

<varlistentry>
<term>&lt;program&gt; &lt;parameter&gt; %f</term>
<listitem><para>
  The difference will be generated with subversion, saved into a temporary file and the parameter <option>%f</option> will be replaced with that file name.
  This may be used, for instance, with a simple call to <application>less</application> or text viewer.
</para></listitem>
</varlistentry>

<varlistentry>
<term>&lt;program&gt; &lt;parameter&gt; %1 %2</term>
<listitem><para>
&kdesvn; let the external program make the difference. %1 and %2 will be replaced with required values (file names or folder names). &kdesvn;
  stores content to compare in a temporary environment (when folders does an <quote>export</quote>, when single file, does a <quote>cat</quote>) when needed and
cleans up after closing external program or closing itself.
</para></listitem>
</varlistentry>
<varlistentry>
<term>Prefer external merge program</term>
<listitem><para>Select if in merge dialog <guilabel>Use external merge</guilabel> should be checked or not as default.</para></listitem>
</varlistentry>
</variablelist>
</para>
</sect2>
<sect2>
<title>External merge program</title>
<para>
  Setup the program and options for using when subversion's builtin merge isn't wanted. The default is <command>kdiff3 %s1 %s2 %t</command>. The order of substitution variables isn't important, and them may there more than once, &eg; like <literal>kdiff3 -o %t %s1 %s2 %t</literal>. This stuff is only tested with <application>meld</application> and &kdiff3;. Think about that external programs mostly do not know anything about subversion <command>ignore</command> parameter so them may show lot more than expected.
</para>
<sect3>
<title>Variable substitutions for external merge program</title>
<para>
<variablelist>

<varlistentry>
<term>%s1</term>
<listitem><para>
Substituted with source number one.
</para></listitem>
</varlistentry>

<varlistentry>
<term>%s2</term>
<listitem><para>
Substituted with source number two. If this is empty or this is equal to source one and start and end revision is same, this variable
will skipped. So be careful setting up command lines like <command>xxdiff --title1 %s1 --title2 %s2 %s1 %s2 %t</command>.
</para></listitem>
</varlistentry>

<varlistentry>
<term>%t</term>
<listitem><para>
Substituted with target.
</para></listitem>
</varlistentry>

</variablelist>

</para>
</sect3>
</sect2>
<sect2 id="extern-resolve-setup">
<title>Conflict resolver program</title>
<para>
You may use an external program like &kdiff3; for resolving conflicts, the default is
<command>kdiff3 %o %m %n -o %t</command>.
</para>
<sect3>
<title>Variable substitution for external conflict resolver</title>
<para>
In parenthesis after each description is an example how subversion would call the files. These options are designed for &kdiff3;, because at this moment this is the only one application supporting all parameters required for a good conflict resolving.
<variablelist>
<varlistentry>
<term>%o or %l</term>
<listitem><para>
Old (local, left) version. This means the lower revision number, &ie; the start point of conflicted changes. (<filename>foo.cc.r2</filename>)
</para></listitem>
</varlistentry>
<varlistentry>
<term>%m or %w</term>
<listitem><para>
Mine (working) version of file, &ie; what you had changed against old version. (<filename>foo.cc.mine</filename>)
</para></listitem>
</varlistentry>
<varlistentry>
<term>%n or %r</term>
<listitem><para>
New (remote, right) version of file. For example, version someone other had made. (<filename>foo.cc.r3</filename>)
</para></listitem>
</varlistentry>
<varlistentry>
<term>%t</term>
<listitem><para>
Target name, &eg; the origin name. For &kdiff3; (as an example) this would be name after the <option>-o</option> parameter (= output file). (<filename>foo.cc</filename>)
</para></listitem>
</varlistentry>
</variablelist>
</para>
</sect3>
</sect2>
</sect1>
<!--FIXME
Colors

Revisions tree
-->
<sect1 id="kio-cmdline-settings">
<title>KIO / command line</title>
<para>
<variablelist>

<varlistentry>
<term>Show log after executing a command</term>
<listitem><para>
Should a dialog open with the log of last subversion command when it was executed via command line or &konqueror; action menu.
</para></listitem>
</varlistentry>

<varlistentry>
<term>Minimum log lines to show</term>
<listitem><para>
  If <guilabel>Show log...</guilabel> is set, what is the minimum of lines before such a dialog will shown. So you may set that such window will
only shown when interesting output was generated (commit log and so on)
</para></listitem>
</varlistentry>

<varlistentry>
<term>Do not display context menu in &konqueror;</term>
<listitem><para>
If set, no action menu entry for &kdesvn; is made in &konqueror;.</para></listitem>
</varlistentry>

<varlistentry>
<term>Do not display entries in toplevel action menu</term>
<listitem><para>
If set, kdesvn will not show some extra actions inside <guimenuitem>Action</guimenuitem> menu of &konqueror; or &dolphin;.</para></listitem>
</varlistentry>

<varlistentry>
<term>KIO operations use standard log message</term>
<listitem><para>
  When making operations on a repository via the &kdesvn; KIO protocol from within &konqueror; (&ie;, <quote>ksvn+...</quote> protocols) on large operations like moving or copy folders &kdesvn; would ask for a log message for each item. This is a behavior of &konqueror;.
When this option is set, the KIO implementation from &kdesvn; will not ask for a log message but set a standard log message. This flag is not for the operations from
&kdesvn; action menu for &konqueror; but only copy/move/mkdir/delete made with &konqueror; or other file managers on a KIO-url.
</para></listitem>
</varlistentry>

<varlistentry>
<term>Standard message</term>
<listitem><para>
  The message &kdesvn; KIO should set on operations from within &konqueror; when the flag above is set. Default is <guilabel>Revision made with &kdesvn; KIO</guilabel>.
</para></listitem>
</varlistentry>

<varlistentry>
<term>KIO can overwrite</term>
<listitem><para>
If this flag is set, you will have a simple write support for existing
items. &eg; you can open files in your editor and save them direct without
checking out them before (&kdesvn; will do it in background).</para>
<para>Use this only if you are sure what you are doing.
</para></listitem>
</varlistentry>

<varlistentry>
<term>KIO shows progress messages</term>
<listitem><para>
If set KIO shows in KDE's Plasma detailed information about current operation.
Error messages of KIO will always displayed and can <emphasis>not</emphasis> be switched off.
</para></listitem>
</varlistentry>

</variablelist>

</para>
</sect1>
</chapter>

<chapter id="commands">
<title>Command Reference</title>

<sect1 id="kdesvn-mainwindow">
<title>The main &kdesvn; window</title>

<sect2>
<title>The File Menu</title>
<para>
<variablelist>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>O</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Open</guimenuitem>
</menuchoice></term>
<listitem><para><action>Open a local working copy or a repository previously checked out</action></para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice>
<guimenu>File</guimenu>
<guimenuitem>Recent opened urls</guimenuitem>
</menuchoice></term>
<listitem><para>This is a shortcut to open recently opened repositories. Clicking on this item opens
a list to the side of the menu with several of the most
recently opened local working copies or a repositories.
Clicking on a specific item will open it in &kdesvn;
</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>N</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>New</guimenuitem>
</menuchoice></term>
<listitem><para><action>Open a window with a new instance of &kdesvn;</action></para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice>
<guimenu>File</guimenu>
<guimenuitem>Subversion Admin</guimenuitem>
</menuchoice></term>
<listitem><para>Menu items with administration tasks for subversion repositories like:
<simplelist>
<member>Create and open new repository</member>
<member>Dump repository to file</member>
<member>Hotcopy a repository</member>
<member>Load dump into repository</member>
</simplelist>
For more information please read the output of <command>svnadmin --help</command>
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>W</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Close</guimenuitem>
</menuchoice>
</term>
<listitem><para><action>Close</action> current opened repository or working copy</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>Q</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Quit</guimenuitem>
</menuchoice></term>
<listitem><para><action>Quits</action> &kdesvn;</para></listitem>
</varlistentry>
</variablelist>
</para>
</sect2>
<sect2>
<title>The Bookmark Menu</title>
<para>
See <ulink url="help:/konqueror/bookmarks.html">&konqueror; help</ulink>.
</para>
</sect2>

<sect2 id="kdesvn-subversion-menu">
<title>The Subversion Menu</title>

<variablelist id="subversion-general">
<title>General subversion actions</title>
<varlistentry>
<term>
<menuchoice>
<shortcut><keycombo action="simul">&Ctrl;<keycap>L</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>History of item</guimenuitem>
</menuchoice></term>
<listitem>
<para><action>Display</action> lifetime log of the currently selected item.
Be careful, this list may be really big!</para>
</listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut><keycombo action="simul">&Ctrl; &Shift;<keycap>L</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>History of item ignoring copies...</guimenuitem>
</menuchoice></term>
<listitem><para>Displays the history log of selected item without following copies.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut><keycombo action="simul">&Ctrl;<keycap>I</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Details</guimenuitem>
</menuchoice></term>
<listitem><para>Displays detailed information about selected item(s)</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Blame</guimenuitem>
</menuchoice></term>
<listitem><para>Makes an annotated list over all checkins. That may consume time!</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Blame range</guimenuitem>
</menuchoice></term>
<listitem><para>Annotate a range of commits for a file.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Cat head</guimenuitem>
</menuchoice></term>
<listitem><para>Shows the content of the last committed version of that entry. (May be different to working copy version if working on a WC!)</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut><keycombo action="simul"><keycap>F2</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Move</guimenuitem>
</menuchoice></term>
<listitem><para>Move or rename item inside working copy or in repository</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut><keycombo action="simul">&Ctrl;<keycap>C</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Copy</guimenuitem>
</menuchoice></term>
<listitem><para>Copy item inside working copy or in repository</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut><keycombo action="simul"><keycap>Del</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Delete selected files/dirs</guimenuitem>
</menuchoice></term>
<listitem><para>Delete selected entries. If working in a working copy you must commit your deletions afterwards.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>New folder</guimenuitem>
</menuchoice></term>
<listitem><para>Create a new folder.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Import folders into current</guimenuitem>
</menuchoice></term>
<listitem><para>Select folders you want to import into the current selected directory</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Checkout a repository</guimenuitem>
</menuchoice></term>
<listitem><para>Creates a new working copy of a repository</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Export a repository</guimenuitem>
</menuchoice></term>
<listitem><para>Exports a repository to file system, &ie; creates a clean revision tree without
subversion information.
</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Lock current items</guimenuitem>
</menuchoice></term>
<listitem><para>Mark current items as locked. Read the subversion handbook before using this!
</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>General</guisubmenu>
<guimenuitem>Unlock current items</guimenuitem>
</menuchoice></term>
<listitem><para>Remove locks on current items. Read the subversion handbook before using this!
</para></listitem>
</varlistentry>
</variablelist>

<variablelist id="subversion-workingcopy">
<title>Working copy</title>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Update to head</guimenuitem>
</menuchoice></term>
<listitem><para>Update working copy to HEAD of repository</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Update to revision...</guimenuitem>
</menuchoice></term>
<listitem><para>Update working copy to a specific revision of repository</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut><keycombo action="simul">&Ctrl;<keycap>#</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Commit</guimenuitem>
</menuchoice></term>
<listitem><para>Commit changes inside working copy for selected items to repository.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut><keycombo action="simul">&Ctrl;<keycap>D</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Diff local changes</guimenuitem>
</menuchoice></term>
<listitem><para>Display local changes as diff-output (without network access). This is the difference only to
last state the working copy was updated to, not against the version in repository.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut><keycombo action="simul">&Ctrl;<keycap>H</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Diff against HEAD</guimenuitem>
</menuchoice></term>
<listitem><para>Diff's current working copy against head of repository.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut><keycombo action="simul">&Ctrl;<keycap>P</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Properties</guimenuitem>
</menuchoice></term>
<listitem><para>View/Edit properties assigned with current entry.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut><keycombo action="simul"><keycap>Insert</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Add selected files/dirs</guimenuitem>
</menuchoice></term>
<listitem><para>Add selected files and/or folders to version control.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Revert current changes</guimenuitem>
</menuchoice></term>
<listitem><para>Revert changes made in working copy and updates to last updated state.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Mark resolved</guimenuitem>
</menuchoice></term>
<listitem><para>Mark conflicted items as not conflicted and remove associated files.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Merge two revisions</guimenuitem>
</menuchoice></term>
<listitem><para>Merge two revisions of entries into working copy.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Ignore/Unignore current item</guimenuitem>
</menuchoice></term>
<listitem><para>Edit property of parent folder of the current item so that selected item will be marked as ignored if not set, otherwise remove it from ignore list.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Cleanup</guimenuitem>
</menuchoice></term>
<listitem><para>Clean up the working copy and remove (commit-)locks if any</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Working copy</guisubmenu>
<guimenuitem>Switch repository</guimenuitem>
</menuchoice></term>
<listitem><para>Switch the root of the current working copy.</para></listitem>
</varlistentry>
</variablelist>

<variablelist id="subversion-repository">
<title>Repository</title>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Repository</guisubmenu>
<guimenuitem>Checkout current repository path</guimenuitem>
</menuchoice></term>
<listitem><para>Create a working copy from the current selected entry if a directory.</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Repository</guisubmenu>
<guimenuitem>Export current repository path</guimenuitem>
</menuchoice></term>
<listitem><para>Create a clean copy on local file system from the current selected entry if a directory.</para></listitem>
</varlistentry>
</variablelist>

<variablelist id="subversion-view">
<title>View actions</title>
<varlistentry>
<term><menuchoice><shortcut><keycombo action="simul"><keycap>F5</keycap></keycombo></shortcut>
<guimenu>Subversion</guimenu>
<guisubmenu>View</guisubmenu>
<guimenuitem>Refresh view</guimenuitem>
</menuchoice></term>
<listitem><para><action>Refresh</action> the current status of all displayed items. This will list each item asked for to be displayed at current status.
</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>View</guisubmenu>
<guimenuitem>Unfold File Tree / Fold File Tree</guimenuitem>
</menuchoice></term>
<listitem><para>Expand or collapse the repository tree view.
</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guisubmenu>Log Cache</guisubmenu>
<guimenuitem>Stop updating the log cache</guimenuitem>
</menuchoice></term>
<listitem><para>The log is cached and used to display the revision tree of a repository. Depending on the Internet connection, size of the subversion repository and history length this may take much time.
Therefore you can stop updating the cache using this action.
</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice>
<guimenu>Subversion</guimenu>
<guimenuitem>Add ssh identities to ssh-agent</guimenuitem>
</menuchoice></term>
<listitem><para>Store your SSH-key password for your current session so no further entering of your password is needed.
</para></listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="kdesvn-database-menu">
<title>The Database Menu</title>
<variablelist>
<varlistentry>
<term><menuchoice>
<guimenu>Database</guimenu>
<guimenuitem>Show database content</guimenuitem>
</menuchoice></term>
<listitem><para>Displays an overview about the cache database content for known repositories and
allows to delete the cache or repository and access to repository settings.
</para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<guimenu>Database</guimenu>
<guimenuitem>Settings for current repository</guimenuitem>
</menuchoice></term>
<listitem><para>Display a dialog to adapt the settings for the cache, logs and statistics.
</para></listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2>
<title>The Settings and Help Menu</title>
<para>Apart from the common &kde; <guimenu>Settings</guimenu> and <guimenu>Help</guimenu>
menu items described in the the <ulink url="help:/fundamentals/ui.html#menus-settings"
>Settings Menu</ulink> and <ulink url="help:/fundamentals/ui.html#menus-help">Help Menu</ulink>
of the &kde; Fundamentals &kdesvn; this additional menu entry:</para>
<variablelist>

<varlistentry>
<term><menuchoice>
<guimenu>Settings</guimenu>
<guimenuitem>Quick settings</guimenuitem>
</menuchoice></term>
<listitem>

<variablelist>

<varlistentry>
<term>
<guimenuitem>Load last opened URL on start</guimenuitem>
</term><listitem>
<para>Reload last opened URL if no one is given on command line.</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guimenuitem>Logs follow node changes</guimenuitem>
</term><listitem>
<para><!--FIXME What does this option do? --></para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guimenuitem>Display ignored files</guimenuitem>
</term><listitem>
<para>Show items marked in subversion for ignore or not.</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guimenuitem>Display unknown files</guimenuitem>
</term><listitem>
<para>Show files not added to the subversion repository.</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guimenuitem>Hide unchanged files</guimenuitem>
</term><listitem>
<para>Use this action to show only changed files and provide a clear and concise overview.</para>
</listitem>
</varlistentry>

<varlistentry>
<term>
<guimenuitem>Work online</guimenuitem>
</term><listitem>
<para>Working offline the log cache will not be updated, therefore the cached log may differ from real log.</para>
</listitem>
</varlistentry>

</variablelist>

</listitem>
</varlistentry>

</variablelist>

</sect2>

</sect1>
</chapter>
<chapter id="credits-and-license">
<title>Credits and License and Thanks</title>
<para>
Program copyright 2005-2009 &Rajko.Albrecht; &Rajko.Albrecht.mail;
</para>
<para>
Many thanks to contributors:
</para>
<itemizedlist>
<listitem><para>Andreas Richter <email>ar@oszine.de</email> - for qt4 port of svnqt</para>
</listitem>
<listitem><para>Michael Biebl <email>biebl@teco.edu</email> - for a lot of help, ideas, implementation and hints.</para>
</listitem>
<listitem><para>Bram Schoenmakers <email>bramschoenmakers@kde.nl</email> - for &kde;-specific hints, dutch translation, cleaning up my code.</para>
</listitem>
</itemizedlist>
<para>
And thanks to all other translators (I never thought that I get that fast such a lot of translations!) and for all of your positive and negative feedback. It helped a lot.
</para>
<para>
  If you want your own translation for &kdesvn; and may want help please read on the <ulink url="http://l10n.kde.org/">&kde; Localization page</ulink> or ask on <ulink url="mailto:kde-i18n-doc@kde.org"><email>kde-i18n-doc@kde.org</email> mailing list</ulink>.
</para>
<para>
Documentation copyright 2005-2006 &Rajko.Albrecht; &Rajko.Albrecht.mail;
</para>
<!-- TRANS:CREDIT_FOR_TRANSLATORS -->

&underFDL;
&underGPL;
</chapter>

<appendix id="revision-syntax">
<title>Syntax for revisions</title>
<para>
  Revisions may be given in the same form as for the standard <application>svn</application> client. That means: number, keyword or date.
</para>
<para>
<variablelist>

<varlistentry>
<term>Number</term>
<listitem><para>
  A number greater or equal -1. -1 means <quote>unspecified revision</quote>, 0 is the beginning. Normally, these numbers should not be used (most operations will fail with that).
</para></listitem>
</varlistentry>

<varlistentry>
<term>Keyword</term>
<listitem><para>
One of
<itemizedlist>

<listitem><para>
HEAD
</para></listitem>

<listitem><para>
BASE
</para></listitem>

<listitem><para>
COMMITED
</para></listitem>

<listitem><para>
PREV
</para></listitem>

<listitem><para>
START
</para></listitem>

<listitem><para>
WORKING
</para></listitem>

</itemizedlist>

</para>
<para>
The keywords are case sensitive! For example, head is not the same as HEAD.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Date</term>
<listitem><para>
Date in form {YYYY-MM-DD}. It must real MM or DD - &eg; 2005-1-1 must be written as {2005-01-01}.
</para></listitem>
</varlistentry>

</variablelist>

</para>
<para>
  Appending a specific revision to an &URL; will always made via <quote>?rev=<replaceable>revision</replaceable></quote>.
</para>
</appendix>

&documentation.index;
</book>
