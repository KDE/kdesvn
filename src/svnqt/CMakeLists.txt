SET(SOURCES
    apr.cpp
    client_annotate.cpp
    client_cat.cpp
    client.cpp
    client_diff.cpp
    client_ls.cpp
    client_modify.cpp
    client_property.cpp
    client_status.cpp
    context.cpp
    datetime.cpp
    dirent.cpp
    entry.cpp
    exception.cpp
    log_entry.cpp
    path.cpp
    pool.cpp
    revision.cpp
    status.cpp
    targets.cpp
    url.cpp
    wc.cpp
    version_check.cpp
    lock_entry.cpp
    client_lock.cpp
    info_entry.cpp
    client_impl.cpp
    contextdata.cpp
    commititem.cpp
    repository.cpp
    repositorydata.cpp
    repositorylistener.cpp
    svnstream.cpp
    svnfilestream.cpp)

SET(INST_HEADERS
    annotate_line.hpp
    apr.hpp
    check.hpp
    client.hpp
    commititem.hpp
    context.hpp
    context_listener.hpp
    datetime.hpp
    dirent.hpp
    entry.hpp
    exception.hpp
    info_entry.hpp
    lock_entry.hpp
    log_entry.hpp
    path.hpp
    pool.hpp
    repository.hpp
    repositorylistener.hpp
    revision.hpp
    smart_pointer.hpp
    shared_pointer.hpp
    status.hpp
    svnfilestream.hpp
    svnstream.hpp
    targets.hpp
    url.hpp
    version_check.hpp
    wc.hpp)

FILE(GLOB svnhdr RELATIVE  ${CMAKE_CURRENT_SOURCE_DIR} "*.hpp")

IF(QT4_FOUND)
    MESSAGE(STATUS "Qt: ${QT_LIBRARY_DIR}")
    MESSAGE(STATUS "Qt: ${QT_QTCORE_LIBRARY}")
    SET(TOUTF8 "toUtf8")
    SET(FROMUTF8 "fromUtf8")
    SET(QLIST "QList")
ELSE(QT4_FOUND)
    IF(QT_FOUND)
        SET(TOUTF8 "utf8")
        SET(FROMUTF8 "fromUtf8")
        SET(QLIST "QValueList")
    ENDIF(QT_FOUND)
ENDIF(QT4_FOUND)

IF (HAVE_GCC_VISIBILITY)
    SET(_SVNQT_EXPORT "__attribute__ ((visibility(\"default\")))")
    SET(_SVNQT_NOEXPORT "__attribute__ ((visibility(\"hidden\")))")
ENDIF (HAVE_GCC_VISIBILITY)

CONFIGURE_FILE(
    "${CMAKE_CURRENT_SOURCE_DIR}/svnqt_defines.hpp.in"
    "${CMAKE_CURRENT_BINARY_DIR}/svnqt_defines.hpp"
    IMMEDIATE
    @ONLY)

SET(INST_HEADERS ${INST_HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/svnqt_defines.hpp)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

IF(NOT WIN32)
    SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
    ADD_LIBRARY(svnqt SHARED ${SOURCES} ${svnhdr})
    SET_TARGET_PROPERTIES(svnqt
        PROPERTIES
        COMPILE_FLAGS ${CMAKE_SHARED_LIBRARY_CXX_FLAGS})
ELSE(NOT WIN32)
    ADD_LIBRARY(svnqt STATIC ${SOURCES} )
ENDIF(NOT WIN32)

#for a libtool like .la file
SET(LIBLA_CURRENT 4)
SET(LIBLA_REVISION 3)
SET(LIBLA_AGE 1)

MATH(EXPR LIB_MAJOR '${LIBLA_CURRENT}-${LIBLA_AGE}')
SET(LIB_MINOR ${LIBLA_AGE})
SET(LIB_RELEASE ${LIBLA_REVISION})

SET(_soversion ${LIB_MAJOR}.${LIB_MINOR}.${LIB_RELEASE})
IF (WIN32)
   SET(_soversion "-${LIB_MAJOR}")
ENDIF (WIN32)
IF(SUNOS)
   SET(LIB_MAJOR ${LIBLA_CURRENT})
   SET(_soversion "${LIBLA_CURRENT}.${LIBLA_REVISION}")
ENDIF(SUNOS)
#don't understand how to do that with darwin and freebsd and so on
#may some of that guy may give a hint.

IF(NOT WIN32)
SET_TARGET_PROPERTIES(svnqt PROPERTIES
    SOVERSION ${LIB_MAJOR}
    VERSION ${_soversion})
ENDIF(NOT WIN32)

SET(ALL_LINKFLAGS ${APR_EXTRA_LIBFLAGS})
SET(ALL_LINKFLAGS "${ALL_LINKFLAGS} ${APU_EXTRA_LIBFLAGS}")
SET_TARGET_PROPERTIES(svnqt PROPERTIES LINK_FLAGS "${ALL_LINKFLAGS} ${LINK_NO_UNDEFINED}")
TARGET_LINK_LIBRARIES(svnqt ${QT_LIBRARIES} ${SUBVERSION_ALL_LIBS})

# Just a small linking test
IF (BUILD_TESTS)
    ADD_EXECUTABLE(testlink testmain.cpp)
    TARGET_LINK_LIBRARIES(testlink svnqt)
ENDIF (BUILD_TESTS)

# install rules
# in win32 we don't install it
IF(NOT WIN32)
    INSTALL(TARGETS svnqt DESTINATION ${LIB_INSTALL_DIR})
    INSTALL(FILES ${INST_HEADERS} DESTINATION include/svnqt)

    # and a libtool file
    GET_TARGET_PROPERTY(_target_location svnqt LOCATION)

    GET_FILENAME_COMPONENT(_laname ${_target_location} NAME_WE)
    GET_FILENAME_COMPONENT(_soname ${_target_location} NAME)
    SET(_laname ${LIBRARY_OUTPUT_PATH}/${_laname}.la)

    FILE(WRITE ${_laname} "# libsvnqt.la - a libtool library file, generated by cmake \n")
    FILE(APPEND ${_laname} "# The name that we can dlopen(3).\n")
    FILE(APPEND ${_laname} "dlname='${_soname}.${LIB_MAJOR}'\n")
    FILE(APPEND ${_laname} "# Names of this library\n")
    FILE(APPEND ${_laname} "library_names='${_soname}.${LIB_MAJOR}.${LIB_MINOR}.${LIB_RELEASE} ${_soname}.${LIB_MAJOR} ${_soname}'\n")
    FILE(APPEND ${_laname} "# The name of the static archive\n")
    FILE(APPEND ${_laname} "old_library=''\n")
    FILE(APPEND ${_laname} "# Libraries that this one depends upon.\n")
    FILE(APPEND ${_laname} "dependency_libs=''\n")
    FILE(APPEND ${_laname} "# Version information for ${_soname}\n")
    FILE(APPEND ${_laname} "current=${LIBLA_CURRENT}\nage=${LIBLA_AGE}\nrevision=${LIBLA_REVISION}\n")
    FILE(APPEND ${_laname} "# Is this an already installed library?\ninstalled=yes\n")
    FILE(APPEND ${_laname} "# Should we warn about portability when linking against -modules?\nshouldnotlink=no\n")
    FILE(APPEND ${_laname} "# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n")
    FILE(APPEND ${_laname} "# Directory that this library needs to be installed in:\n")
    FILE(APPEND ${_laname} "libdir='${LIB_INSTALL_DIR}'\n")
    INSTALL(FILES ${_laname} DESTINATION ${LIB_INSTALL_DIR})
ENDIF(NOT WIN32)
